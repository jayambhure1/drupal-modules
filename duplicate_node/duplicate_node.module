<?php

/**
 * @file
 * Contains duplicate_node.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupRelationship;
use Drupal\group\Plugin\Group\Relation\GroupRelationTypeManagerInterface;

/**
 * Implements hook_entity_type_build().
 */
function duplicate_node_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('duplicate_node', 'Drupal\duplicate_node\Form\DuplicateNodeForm');
  }
}

/**
 * Implements hook_entity_operation().
 */
function duplicate_node_entity_operation(EntityInterface $entity) {
  $operations = [];

  // Only add an operation for node entities.
  if ($entity->getEntityTypeId() !== 'node') {
    return $operations;
  }

  if (!_duplicate_node_has_duplicate_permission($entity)) {
    return $operations;
  }

  $operations['duplicate_node'] = [
    'title' => t('Duplicate'),
    'weight' => '100',
    'url' => Url::fromRoute('duplicate_node.node.duplicate_node', ['node' => $entity->id()]),
  ];

  return $operations;
}

/**
 * Implements hook_help().
 */
function duplicate_node_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.duplicate_node':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()
          ->get('markdown.settings')
          ->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_form_alter().
 */
function duplicate_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!array_key_exists('footer', $form)) {
    return;
  }

  // Check the operation set on the form is 'duplicate_node'.
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof ContentEntityFormInterface) {
    return;
  }
  if ($form_object->getOperation() !== 'duplicate_node') {
    return;
  }

  // Check that the content entity being duplicated is moderated.
  if (!\Drupal::moduleHandler()->moduleExists('content_moderation')) {
    return;
  }
  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  if (!$moderation_info->isModeratedEntity($form_object->getEntity())) {
    return;
  }

  $form['moderation_state']['#group'] = 'footer';
}

/**
 * Determine if the current user has permission to duplicate a specified node.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $node
 *   The node to examine.
 *
 * @return bool
 *   TRUE or FALSE
 */
function _duplicate_node_has_duplicate_permission(ContentEntityInterface $node) {
  $current_user = \Drupal::currentUser();
  $bundle = $node->bundle();
  if ($current_user->hasPermission("duplicate $bundle content")) {
    if (\Drupal::moduleHandler()->moduleExists('gnode')) {
      // Check that user has permission to create a relationship.
      // Support for group module version 1.x.
      if (class_exists(GroupContent::class)) {
        $group_relationships = GroupContent::loadByEntity($node);
        foreach ($group_relationships as $group_relationship) {
          $access = $group_relationship->getContentPlugin()->createEntityAccess($group_relationship->getGroup(), $current_user);
          if ($access->isAllowed()) {
            return TRUE;
          }
        }
      }
      // Support for group module version 2.x and 3.x.
      else {
        $group_relationships = GroupRelationship::loadByEntity($node);
        $relation_type_manager = \Drupal::service('group_relation_type.manager');
        assert($relation_type_manager instanceof GroupRelationTypeManagerInterface);
        foreach ($group_relationships as $group_relationship) {
          $access_handler = $relation_type_manager->getAccessControlHandler($group_relationship->getPluginId());
          $access = $access_handler->entityCreateAccess($group_relationship->getGroup(), $current_user);
          if ($access) {
            return TRUE;
          }
        }
      }
    }

    // Only check global access if we there is no group module enabled, or
    // content does not have group(s).
    if (empty($group_relationships) && $node->access('create')) {
      return TRUE;
    }
  }
  return FALSE;
}
